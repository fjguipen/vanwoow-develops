"use strict";var posts=[{id:0,title:"\xA1Hola mundo..! \xA1Hola vanwoow!",date:"15/04/2019",by:"JaviGP",url:{twitter:"https://twitter.com/GuisadoJavier/status/1118235526191042560",instagram:"https://www.instagram.com/p/BwU_jRDnhV7/?hl=es",linkedin:"https://www.linkedin.com/feed/update/urn:li:activity:6524692568092086272"},body:"<p><strong>\xA1HOLA!</strong> Me llamo Javi, autodidacta y apasionado del mundo de la programaci\xF3n, en especial el desarollo de aplicaciones web y la automatizaci\xF3n. Desde que descubr\xED este mundillo (hace 2 a\xF1os no sab\xEDa que era un bucle for <strong>:P</strong>) no he dejado de investigar y aprender. </p>\n            \n            <p>Aprovechar\xE9 esta primera entrada para describir el porqu\xE9 de esta p\xE1gina y por qu\xE9 deber\xEDas quedarte y acompa\xF1arnos <strong>;)</strong></p>\n\n            <h2>\xBFVanwoow?</h2>\n            <p><a href=\"https://vanwoow.es/\" target=\"_blank\">Vanwoow</a> es un proyecto iniciativa de Manu y Auxi, en el que Ana y yo ca\xEDmos inevitablemente. Trata sobre la despoblaci\xF3n de la Espa\xF1a rural, de c\xF3mo los viajeros en furgo o autocaravana pueden llegar a dinamizar con sus viajes los recursos de estos peque\xF1os municipios y, obviamente, de la plataforma que pondr\xE1 a toda la Comunidad (viajeros, pueblos, productores locales) en contacto.</p>\n            \n            <p>En la <strong>Cooperativa</strong>, nuestros socios ser\xE1n usuarios y anfitriones que pondr\xE1n vivir u ofrecer experiencias, compartirlas y apoyar una causa social, entre otras. Nosotros simplemente ponemos las herramientas a disposici\xF3n de todos ellos.</p>\n\n            <h2>Blog tecnol\xF3gico</h2>\n            <p>En esta p\xE1gina ir\xE9 describiendo el proceso de construcci\xF3n de la aplicaci\xF3n web de vanwoow. Describir\xE9 la arquitectura, hablar\xE9 sobre las distintas tecnolog\xEDas que se est\xE1n utilizando, como <strong>React</strong> o <strong>Graphql</strong>, de las bondades de <strong>ES6</strong>, las decisiones que se toman, etc. Adem\xE1s, describir\xE9 todas aquellas novedades y descubirmientos que aparezcan durante el proceso. En definitiva, quiero <strong>compartir la experiencia de la creaci\xF3n de la plataforma</strong>.</p>\n\n            <p>As\xED que si como yo, bebes 5 tazas de caf\xE9 al d\xEDa, eres un freak de las nuevas tecnolog\xEDas y te encanta pik\xE1 c\xF3digo, <strong>\xA1te invito a que me acompa\xF1es y colabores abiertamente durante el desarollo!</strong></p>\n\n            <p><br>\n            Vamos a ver un ejemplo muy b\xE1sico, de una funci\xF3n que uso en este mismo blog, el cual est\xE1 alojado en github. Sigue la estela de una SPA (o aplicaci\xF3n de una sola p\xE1gina), utilizando s\xF3lamente Javascript (en su versi\xF3n 2015 o <strong>ES6</strong>).</p>\n            \n            <p>ES6 es una actualizacion de Javascript que pr\xE1cticamente todos los navegadores modernos lo incluyen como estandar y que viene con los bolsillos llenos de nuevas y maravillosas funcionalidades y atajos sint\xE1cticos. Para garantizar la compatilibidad con el mayor n\xFAmero de navegadores, he compilado el c\xF3digo fuente a ES5 utilizando Babel.js, de modo que aunque desarrolle utilizando ES6, para el navegador (cliente) ser\xE1 como si estuviese escrito en Javascript convencional (en una pr\xF3xima publicaci\xF3n hablar\xE9 sobre <strong>Babel</strong> y <strong>Webpack</strong>, herramientas que nos ayudan y agilizan enormemente el trabajo).\n            <pre><code class='lang-js'>/** \n * Recupera la publicaci\xF3n en base al \xEDndice\n * que recibe por par\xE1metro, y lo inserta en el DOM\n*/\n\nconst createContent = (index = state.current) =>{\n    let postData = posts[index];\n    let root = document.getElementById('content');    \n\n    return root.innerHTML = Post(postData);\n}\n\n// Componente que contendr\xE1 la publicaci\xF3n\nconst Post = (post) => {\n    return (\n        `\n        &lt;article&gt;\n            ${Title(post.title)}\n            ${DateC(post.date, post.by)}\n            ${Body(post.body)}\n        &lt;/article&gt;\n        `\n    )\n}</code></pre>\n            </p>\n            <p>La primera funci\xF3n extrae una publicaci\xF3n del array de datos y lo inserta en el DOM. El \xEDndice por defecto es el \xFAltimo elemento de un array ordenado por fecha, de modo que siempre se muestre la \xFAltima publicaci\xF3n cuando se accede por primera vez al blog. Siempre que se cambie la publicaci\xF3n activa, el estado global (state) tambi\xE9n lo har\xE1, reflejando este cambio y permitiendonos controlar qu\xE9 post se est\xE1 visualizando en todo momento.</p>\n\n            <p>La segunda funci\xF3n imita de forma descarada (y muy b\xE1sica) c\xF3mo ser\xEDa un componente en <strong>React.js</strong> pero con <strong>Javascript</strong> sin m\xE1s (aka Vanilla). En su interior se llama al resto de componentes que lo conforman.</p>\n\n            <p>\xA1Y hasta aqu\xED la primera entrada! En la pr\xF3xima explicar\xE9 cual es la arquitectura de la plataforma y qu\xE9 tecnolog\xEDas intervienen en ella.</p>\n        "},{id:1,title:"Una mirada al interior de la app web de vanwoow",date:"20/04/2019",by:"JaviGP",url:{twitter:"https://twitter.com/GuisadoJavier/status/1122911375154716672",instagram:"https://www.instagram.com/p/Bw2OuPzHslR/",linkedin:"https://www.linkedin.com/feed/update/urn:li:activity:6528677165909835776"},body:"<h2>El proceso de selecci\xF3n</h2><p>Lo primero que hice cuando supe que tendr\xEDa que desarrollar la app de <a href=\"https://vanwoow.es\" target=\"_blank\">vanwoow</a> fue dedicar un largo per\xEDodo de tiempo a documentarme y a buscar informaci\xF3n sobre las distintas tecnolog\xEDas que ten\xEDa a mi disposici\xF3n. </p><p>Iba buscando aquellas con una <strong>curva de r\xE1pido aprendizaje, frescas y que estuviesen en boca de muchos</strong>, con el objetivo de poder encontrar una mayor cantidad de informaci\xF3n actualizada. Ya que como muchos, inici\xE9 este viaje muy verde y con tan solo una base de programaci\xF3n (en Java..) y bases de datos.</p><p>Fue un proceso dif\xEDcil porque estaba continuamente expuesto al peligro de caer enamorado de alguna tecnolog\xEDa que para nada encajase en nuestro proyecto. Y as\xED fue\u2026 con <strong>MongoDB</strong>. Su sistema de colecciones no relacional resultaba muy tentador, aunque por suerte no tard\xE9 mucho en darme cuenta de que estaba intentado implementar MongoDB con calzador</p><p>El punto cr\xEDtico por la que al final descart\xE9 MongoDB fue la necesidad de tener un set de r\xE9plicas como requisito para realizar transacciones, ya que <strong>todas las actualizaciones en MongoDB (de manera natural) son at\xF3micas para cada documento</strong>. Tener un set de r\xE9plicas en MongoDB implica una reducci\xF3n importante en la velocidad de las operaciones realizadas contra la base de datos, por lo que hac\xEDa que el principal beneficio de usar MongoDB, su velocidad, se tambalease.</p><p>Al final me decant\xE9 por <strong>PostgreSQL</strong> y la verdad es que estoy bastante contento con lo que me est\xE1 ofreciendo.</p><p>Otro punto importante, fue pensar en el tipo de aplicaci\xF3n web que quer\xEDa hacer, o mejor dicho, que necesit\xE1bamos tener. SSR, SPA, isomorfa, progresiva... \xA1madre m\xEDa!</p><p>Todas ellas tienen sus ventajas e inconvenientes, pero ten\xEDa claro que <strong>vanwoow ten\xEDa que ser especial</strong>.</p><p>En este punto la elecci\xF3n del <strong>Framework</strong> tuvo mucho que ver, ya que en este caso <strong>React.js</strong> te pone las cosas f\xE1ciles para montar una <strong>SPA isomorfa</strong>: renderiza por igual en el servidor como en el cliente. Esto permite, servir la primera carga de la aplicaci\xF3n de manera muy r\xE1pida ya que es renderizada totalmente por el servidor antes de enviarla, y por el otro, nos garantiza que los buscadores indexen correctamente el contenido de nuestra web, contrarrestando los dos principales inconvenientes de las SPA (Aplicaciones de una sola p\xE1gina). Tras el primer renderizado, la app sigue renderizando s\xF3lo en el cliente, utilizando el servidor como fuente de datos (esto lo veremos un poco mejor m\xE1s adelante). El reto: <strong>asegurar que tanto el servidor como el cliente permanezcan sincronizados</strong>, de lo contrario, correremos el riesgo de encontrarnos con resultados inesperados y muy desagradables <strong>:P</strong>.</p><p>As\xED pues, ten\xEDa m\xE1s o menos claro que usar\xEDa postgre, react para el frontend y <strong>Node.js</strong> como principal candidato para el back. Node.js , que aun cuando se ejecuta en un \xFAnico thread, destaca por su velocidad a la hora de manejar procesos de entrada/salida gracias a su <strong>asincron\xEDa</strong> (procesos que se ejecutan de manera \u201Csimult\xE1nea\u201D sin necesidad de esperar a que terminen unos u otros). Como nuestra app principalmente se renderiza en el cliente, node resulta ideal. Nunca podr\xEDa aconsejar el uso de Node.js para cualquier cosa que implique grandes (o no tan grandes..) procesamiento de datos, ya que en cuanto a procesos s\xEDncronos se refiere resulta bastante lento (Ojo, esto est\xE1 cambiando en las \xFAltimas versiones de Node y sus workers, pero eso amigos\u2026 es otra pel\xEDcula).</p><p>Junto con node, vino <strong>express.js</strong>. Se trata de un framework ligero para crear infraestructuras de servidores http en node. Su simpleza y facilidad de uso con sus middlewares hicieron que lo eligiera como candidato pr\xE1cticamente al instante (<strong>Koa.js</strong> habr\xEDa sido la principal alternativa).</p><p>Pr\xE1cticamente lo ten\xEDa todo. Mientras buscaba informaci\xF3n sobre qu\xE9 era una aplicaci\xF3n <strong>RESTFul</strong>, una <strong>API REST</strong>, <strong>CRUD</strong>.. me top\xE9 con <strong>Graphql</strong> (As\xED es.. otro gran invento por parte del equipo de Facebook). Y junto con Graphql, <strong>Apollo Graphql</strong>. Esta librer\xEDa viene con una serie de herramientas preparadas para ayudarnos a implementar un servidor y un cliente utilizando Graphql, optimizado para React.js. Y para redondear, su documentaci\xF3n est\xE1 genial (un punto importante a la hora de elegir tecnolog\xEDas, al menos, para m\xED).</p><img src=\"assets/img/logos-tecnologias.png\" alt=\"logos\" /><p>Graphql te permite definir una API en la que en la propia petici\xF3n se describen qu\xE9 y c\xF3mo se quieren recibir los datos:</p><div class=\"two-columns-code\"><pre><code class=\"lang-graphql\">#Petici\xF3n\nquery obtenerUsuario{\n    usuario(id: 5){\n        nombre\n        edad\n    }\n}</code></pre><pre><code class=\"lang-json\">//Respuesta\n\"data\": {\n    \"usuario\": {\n        \"nombre\": \"Pepe\",\n        \"edad\": 34\n    }\n}    \n            </code>            </pre>            </div><p>Para completar el c\xEDrculo m\xE1gico, a\xF1ad\xED <strong>Knex.js</strong> y <strong>Objection.js</strong>. Knex.js nos permite crear querys SQL usando Javascript mientras que Objection.js es un ORM muy ligero que nos permite mapear las relaciones de nuestros datos de una manera sencilla. Y adem\xE1s, funciona a las mil maravillas con PostgreSQL.</p><p>Un ejemplo de Knex.js sacado de la documentaci\xF3n oficial:</p><pre><code class=\"lang-js\">const subquery = knex('users')\n    .where('votes', '>', 100)\n    .andWhere('status', 'active')\n    .orWhere('name', 'John')\n    .select('id');\n\nknex('accounts').where('id', 'in', subquery)\n\nEs igual a:\nselect * from accounts\nwhere id in (select id from users\n                where votes > 100 and status = 'active' or name = 'John'              </code></pre><p>Objection, que mantiene su propia sintaxis, usa por debajo Knex.js. Por lo general, si usamos Objection no usaremos demasiado los m\xE9todos de Knex directamente.</p><p>Un ejemplo real que uso actualmente en la API de vanwoow:</p><pre><code class=\"lang-js\">class Anfitrion extends Objection {\n    static get tableName(){\n        return 'anfitriones';\n    }\n    static relationMappings(){\n        return {\n            usuario:{\n                relation: Model.BelongsToOneRelation,\n                model: Usuario,\n                join:{\n                    from: 'anfitriones.id',\n                    to: 'usuarios.id'\n                }\n            }\n        }\n    }\n}\n              \nconst anfitrion = await Anfitrion.query()\n    .where('id', Anfitrion.$relatedQuery('usuario')\n        .select('id')\n        .where('email', provided.email)\n\nEs igual a:\nselect * from anfitriones\n    where id = (select id from usuarios\n                    where email = email);              </code></pre><h2>C\xF3digo libre</h2><p>Pues s\xED, aunque es algo que me da bastante respeto y miedo (quiz\xE1s por desconocimiento), siento que se lo debemos al c\xF3digo libre, de hecho pienso que de no ser as\xED, hoy no podr\xEDa estar desarrollando la app de vanwoow.</p><p>Por ello, y millones de razones m\xE1s, la plataforma de vanwoow ser\xE1 de c\xF3digo abierto, para que todos puedan colaborar y disfrutar del trabajo que estamos realizando.</p><p>Desde hoy, puedes ver en el <a href=\"https://github.com/vanwoow\" target=\"_blank\">repositorio de github de vanwoow</a> una parte de la API, en la cual utilizo Graphql para construir los endpoints.</p><p>Conforme vaya explicando cada secci\xF3n de la aplicaci\xF3n y como se ha hecho, veremos m\xE1s en profundidad todas estas tecnolog\xEDas, pero por lo pronto si no conoc\xEDas alguna y te pica la curiosidad, te animo a que busques un poco sobre ellas.</p><p>En la pr\xF3xima publicaci\xF3n veremos c\xF3mo podemos crear un entorno de desarrollo para <strong>Javascript (ES6, ES7)</strong>, utilizando node, <strong>babel</strong> y <strong>webpack</strong>.</p>"},{id:2,title:"Graphql para principiantes",date:"9/05/2019",by:"JaviGP",url:{twitter:"https://twitter.com/GuisadoJavier/status/1132737075311198211",instagram:"https://www.instagram.com/p/Bx8Cr-YIsP_/?utm_source=ig_web_copy_link",linkedin:"https://www.linkedin.com/feed/update/urn:li:activity:6538502427216359424"},body:"<h2>\xBFQu\xE9 es?</h2><p>Resumiendo y mucho, Graphql es una sintaxis que describe de manera podemos preguntar o requerir un recurso.</p><p>La principal caracter\xEDstica de Graphql es que deja en manos del cliente decidir qu\xE9 datos quiere recibir.</p><h2>\xBFC\xF3mo funciona?</h2><h3>Schema</h3><p>Es necesario definir los tipos de datos, sus campos, y los tipos de estos campos. Los tipos b\xE1sicos de graphql son <strong>Query</strong> y <strong>Mutation</strong>. Query ser\xE1 usado para acceder a la informaci\xF3n, mientras que con Mutation podremos modificarla (o mejor dicho, mutarla).</p><p>Veamos un ejemplo, en el que definimos un Query para recuperar un usuario o todos los usuarios, cuyo tipo definimos a continuaci\xF3n, utilizando los tipos escalares gen\xE9ricos de graphql:</p><pre><code class=\"lang-graphql\">type Query {\n    usuario: Usuario #Devuelve un tipo Usuario\n    usuarios: [Usuario] #Devuelve un array de tipos Usuario\n}\n\n#Define el tipo Usuario, a trav\xE9s de sus campos,\ntype Usuario {\n    id: ID\n    nombre: String\n    edad: Int \n    #Podr\xEDa incluir otro tipo complejo:\n    mensajes: [Mensaje]\n}\n\ntype Mensaje {\n    id: ID\n    fecha: Date\n    autor: Usuario\n    titulo: String\n    contenido: String\n}\n</code></pre><h3>Resolvers</h3><p>Los resolvers son las funciones que nos permiten acceder a los datos previamente definidos. Como par\xE1metros reciben:</p><ul>            <li><p>parent: En este caso es Query.</p></li>            <li><p>args: argumentos pasados como variables en la petici\xF3n</p></li>            <li><p>context: Objeto definido en la creaci\xF3n del servidor</p></li>            <li><p>info: Informaci\xF3n adicional, rara vez se usa.</p></li>            </ul><p>Veamos c\xF3mo podemos preguntar por la informaci\xF3n de un usuario: </p><pre><code class=\"lang-js\">{\n    Query: {\n        usuario: (parent, args, context, info) => {\n            return User.get(args.id);\n        },\n        usuarios: (parent, args, context, info) => {\n            return User.getAll()\n        }\n    }\n} </code></pre><p>Con esto ya tenemos suficiente para empezar a solicitar al servidor los datos de nuestros usuarios. Usando el siguiente query obtendremos el siguiente resultado:</p><div class=\"two-columns-code\"><pre><code class=\"lang-graphql\">#Petici\xF3n\nquery obtenerUsuario{\n    usuario(id: 5){\n        nombre\n        edad\n        mensajes {\n            id\n            fecha\n        }\n    }\n}</code></pre><pre><code class=\"lang-json\">//Respuesta\n\"data\": {\n    \"usuario\": {\n        \"nombre\": \"Pepe\",\n        \"edad\": 34\n        \"mensajes\": [\n            {\n                id: \"1\",\n                fecha: \"2019-05-10T20:12:27.397Z\"\n            },\n            {\n                id: \"2\",\n                fecha: \"2019-05-24T18:33:16.343Z\"\n            }\n        ]\n    }\n}    \n            </code>            </pre>            </div><p>Si quisi\xE9ramos podr\xEDamos solicitar el id, bastar\xEDa con a\xF1adir el campo dentro del query de la petici\xF3n.</p><p>Del mismo modo que existe postman para REST, en graphql tenemos Graphql PlayGround, un marco donde poder jugar con nuestra API, testear su funcionamiento e inspeccionar el schema: </p><img src=\"assets/img/gql_pg.PNG\" alt=\"graphql playground\" /><p>En una futura entrega hablar\xE9 de los problemas que introduce Graphql (no es oro todo lo que reluce), y c\xF3mo podemos solventarlos.</p>"},{id:3,title:"Aplicaciones web isomorfas",date:"20/05/2019",by:"JaviGP",url:{twitter:"https://twitter.com/GuisadoJavier/status/1132737075311198211",instagram:"https://www.instagram.com/p/Bx8Cr-YIsP_/?utm_source=ig_web_copy_link",linkedin:"https://www.linkedin.com/feed/update/urn:li:activity:6538502427216359424"},body:"<h2>SSR (Server Side Rendering)</h2><p>Quiz\xE1s la forma m\xE1s cl\xE1sica de servir p\xE1ginas web. El servidor se encarga de procesar todo el c\xF3digo y entregar al cliente la p\xE1gina web con todo \u201Cmontado\u201D, a partir de ah\xED, gracias a javascript podr\xEDamos <strong>realizar cambios en la p\xE1gina sin necesidad de volver a cargarla</strong> (el principio de las SPA). Aqu\xED no tenemos el problema del SEO, pero la velocidad de respuesta se resiente, ya que es necesario solicitar al servidor el renderizado cada vez que queramos visitar otra p\xE1gina dentro del sitio web.</p><h2>SPA (Single Page Application)</h2><p>Por lo general, siempre que hablamos de aplicaciones web solemos pensar en aplicaciones del tipo SPA. Este tipo de aplicaci\xF3n web se caracteriza por <strong>delegar todo el control y renderizado al cliente</Strong> (navegador). Cuando se intenta acceder a una SPA a trav\xE9s de su URL, el navegador recibe un paquete con todo el c\xF3digo necesario para generar el sitio web. Una vez el paquete es recibido, se ejecuta. Esto permite una gran velocidad de respuesta para las sucesivas acciones sobre la p\xE1gina pero,  \xBFqu\xE9 ocurrir\xEDa si el navegador tuviese el procesamiento por javascript desactivado? Pues la p\xE1gina nos ser\xEDa visible.</p><p>Adem\xE1s, esto genera otros problemas  de cara al SEO, ya que no todos los indexadores de b\xFAsqueda son capaces de ejecutar el contenido que aguarda en el c\xF3digo fuente. Otra desventaja es que la primera carga es muy lenta debido a que el tama\xF1o del paquete suele ser bastante grande.</p><h2>\xBFY por qu\xE9 no todo?</h2><p>En una aplicaci\xF3n isomorfa, <strong>la primera petici\xF3n realizada por el navegador es renderizada por el servidor</strong> y servida lista para presentarse en el navegador. <strong>A partir de ese momento, el navegador toma el relevo</strong> y se encargar\xE1 de renderizar y controlar las sucesivas acciones (de ah\xED su nombre, isomorfo o universal, ya que el mismo c\xF3digo es capaz de correr tanto en el cliente como en el servidor). Con ello logramos que la primera carga sea mucho m\xE1s r\xE1pida que en las SPA (no se requiere javascript en el navegador) y las sucesivas lo sean m\xE1s que en las SSR, adem\xE1s, no tendremos ning\xFAn problema de SEO. <strong>WIN WIN</strong></p><p>El \xFAnico requisito es que tanto servidor como cliente est\xE9n sincronizados en todo momento para evitar problemas y situaciones extra\xF1as.</p><p>Controlador todo esto no es f\xE1cil pero existen herramientas que nos ayudan a gestionarlo de manera m\xE1s o menos sencilla.</p><h2>Ejemplo con Apollo Graphql y React</p><p>Veamos un simple ejemplo de como podr\xEDamos implementar esto, necesitaremos dos ficheros. En uno incluiremos la l\xF3gica para el renderizado en el servidor, fijaros en el uso de <strong>StaticRouter</strong> en el servidor, mientras que en el cliente usaremos <strong>BrowserRouter</strong>, ambos implementaciones de <strong>React Router 4</strong></p><p><strong>server.js</strong></p><pre><code class=\"lang-jsx\">import React from 'react'\nimport ReactDOM from 'react-dom/server'\nimport {ApolloProvider, renderToStringWithData} from 'react-apollo';\nimport {ApolloClient} from 'apollo-client';\nimport {HttpLink} from 'apollo-link-http';\nimport {InMemoryCache} from \"apollo-cache-inmemory\";\nimport {StaticRouter} from 'react-router-dom';    \nimport Root from './src/components/App';  \n\n//Apollo client\nconst client = new ApolloClient({\n    ssrMode:true,\n    link:new HttpLink({\n        uri: process.env.API_PATH_URL,\n        //There is no fetch method in Node.js\n        fetch: fetch,\n        //Send cookies along with request\n        credentials: 'include',\n        headers:{\n            cookie: req.header('Cookie'),\n        },\n    }),\n    cache: new InMemoryCache()\n})\n\n//This object will be passed to router children\nconst context =  {}\n        \nconst App = ()\n    &lt;ApolloProvider client={client}&gt;\n        &lt;StaticRouter context={context} location={req.url}&gt;\n            &lt;Root /&gt;\n        &lt;/StaticRouter&gt;\n    &lt;/ApolloProvider&gt;\n)\n        \nrenderToStringWithData(App).then((content) => {\n    const initialState = client.extract();\n    const html = <Html content={content} state={initialState}/>;\n                \n    res.status(200);\n    res.send(`&lt;!doctype html&gt;${ReactDOM.renderToStaticMarkup(html)}`);\n    res.end();\n})\n.catch( error => console.log(error))\n        \n//Html component\nfunction Html({ content, state }) {\n    return (\n        &lt;html&gt;\n            &lt;head&gt;&lt;/head&gt;\n            &lt;body&gt;\n                &lt;div id=\"root\" dangerouslySetInnerHTML={{ __html: content }}&gt;&lt;/div&gt;\n                &lt;script dangerouslySetInnerHTML={{\n                    __html: `window.__PREV_STATE__=${JSON.stringify(state).replace(/&lt;/g, '\\u003c')};`,\n                  }}&gt;&lt;/script&gt;\n            &lt;/body&gt;\n            &lt;script src=\"/client_bundle.js\"&gt;&lt;/script&gt;\n        &lt;/html&gt;\n    );\n}</code></pre><br><p><strong>client.js</strong></p><pre><code class=\"lang-jsx\">import React from 'react';\nimport ReactDom from 'react-dom';\nimport {ApolloClient} from 'apollo-client';\nimport {HttpLink} from 'apollo-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {BrowserRouter} from 'react-router-dom';\nimport {ApolloProvider} from 'react-apollo';\nimport App from './components/App';\n\n//Apollo Client\nconst client = new ApolloClient({\n    link:new HttpLink({\n        uri: process.env.API_PATH_URL,\n        //Send cookies with server requests\n        credentials: 'include',\n    }),\n    // Restore cache with current state (from SSR)\n    cache: new InMemoryCache().restore(window.__PREV_STATE__),\n});\n    \n//Rehydrates DOM, It doesn't make changes if not needed and takes the control\n    ReactDom.hydrate(\n        &lt;ApolloProvider client={client}&gt;\n            &lt;BrowserRouter&gt;\n                &lt;App /&gt;\n            &lt;/BrowserRouter&gt;\n        &lt;/ApolloProvider&gt;, document.getElementById('root')\n    )</code></pre>"},{id:4,title:"Autentificaci\xF3n de lado del servidor y SPAs",date:"24/05/2019",by:"JaviGP",url:{twitter:"https://twitter.com/GuisadoJavier/status/1132737075311198211",instagram:"https://www.instagram.com/p/Bx8Cr-YIsP_/?utm_source=ig_web_copy_link",linkedin:"https://www.linkedin.com/feed/update/urn:li:activity:6538502427216359424"},body:"<p>Un punto clave en el desarrollo de cualquier aplicaci\xF3n web es definir e implementar c\xF3mo manejaremos la autentificaci\xF3n del usuario. Existen numerosos sistemas de implementarlo pero al final todos se basan en un mismo principio.</p><p>Uno muy habitual en aplicaciones SPA es el uso de <strong>JWT</strong>. En el momento que el usuario inicia sesi\xF3n correctamente, se almacena un token con la informaci\xF3n del usuario encriptada (por favor, nunca incluir la contrase\xF1a aqu\xED) en el sistema de almacenamiento del navegador (localStorage), entonces desde la aplicaci\xF3n podremos acceder a esta informaci\xF3n y comprobar as\xED la identidad del usuario. <strong>Todo ocurre en el cliente</strong> (con las vulnerabilidades que ello conlleva).</p><p>En <strong>vanwoow</strong> he optado por el tradicional sistema de sesiones del lado del servidor. Cuando un usuario inicia sesi\xF3n mediante sus credenciales usuario y contrase\xF1a correctamente, se crea un registro en la base de datos con la informaci\xF3n relevante a la actual sesi\xF3n. Esta sesi\xF3n consta de un identificador con el cual se crear\xE1 la <strong>Cookie</strong> que ser\xE1 enviada al cliente junto con la respuesta. La cookie tan solo nos vale para decir qu\xE9 usuario va con qu\xE9 sesi\xF3n, la informaci\xF3n relevante al usuario y a su sesi\xF3n no es expuesta y permanece del servidor. \n            </p><p>El servidor encargado del control de usuarios ser\xE1 el propio servidor de la API (montado con Apollo Graphql Server y express), teni\xE9ndolo as\xED como \xFAnica fuente de verdad a la hora de realizar las comprobaciones de seguridad.</p><p>En nuestro caso usamos la librer\xEDa express-session junto con connect-pg-simple para almacenar las sesiones en PostgreSQL. Para simplificar, usar\xE9 el ejemplo con las sesiones almacenadas en memoria.</p><p>En primer lugar, a\xF1adiremos express-session junto con su configuraci\xF3n a nuestra app express:</p><pre><code class=\"lang-js\">import express from 'express';\nimport session from 'express-session';\n            \napp.use(session({\n    name: \"qid\",\n    //Generates unique id\n    genid: function (req) {\n        return genuuid()\n    },\n    secret: process.env.SECRET_KEY,\n    resave: false,\n    //Creates cookie on first request (for visitors tracking)\n    saveUninitialized: false,\n    cookie: {\n        httpOnly: true,\n        maxAge: 30 * 24 * 60 * 60 * 1000 //30 days\n    }\n}));</code></pre><p>Creamos nuestro servidor Apollo. Pasamos a los resolvers los datos del usuario en el caso de que exista una sesi\xF3n activa en el contexto, junto con la propia petici\xF3n y los modelos de datos (creados con <strong>Objection.js</strong>):</p><pre><code class=\"lang-js\">import {ApolloServer} from 'apollo-server-express';\n\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    context: async ({ req }) => {\n        return {\n            req,\n            models,\n            loggedIn: await getLoggedInUser(req),\n        }\n      },\n    });\n    \n// This is our unique source of true, with every request we check\n// the actual user status from the database, then we pass this to resolvers\nconst getLoggedInUser = async (req) => {\n    if (!req.session || !req.session.user) return null\n    \n    let user = await models.Usuario.query()\n        .select('nombre', 'email', 'rol', 'verificado', 'socio_desde')\n        .where('email', req.session.user.email)\n        .first();\n    \n    return user;\n}</pre></code><p>Necesitaremos un endpoint en el que administrar el inicio de sesi\xF3n, para ello se define un resolver que recibe como par\xE1metros el email y la contrase\xF1a del usuario. Haremos las validaciones necesarias (por simpleza he omitido este paso), si todo es correcto modifaremos la sesi\xF3n en la petici\xF3n, express-session se encargara del resto.</p><pre><code class=\"lang-js\">Mutation:{\n    //User login graphql resolver mutation\n    //Validates user login data and creates the session\n    logIn: async (_, { email, password }, { req, loggedIn, models }) => {\n        //Check for user credentials...\n        //... More code\n        if (succes){\n            //Just modofy session from request object, express-session handles everything\n            req.session[\"user\"] = { email };\n        }\n    }\n}</code></pre><p>Por \xFAltimo, necesitaremos otro endpoint al que preguntaremos si el usuario actual tiene una sesi\xF3n activa. Esto es \xFAtil para poder modificar lo que mostramos en el cliente en funci\xF3n de si el usuario est\xE1 logueado o no. Recordemos que estas funciones reciben la informaci\xF3n de la sesi\xF3n del usuario que realiza la petici\xF3n como contexto. Si existe, se la entregamos:</p><pre><code class=\"lang-js\">Query: {\n    //Returns current logged in user data (himself)\n    getCurrentUser: (_, __, { loggedIn }) => {\n        if (loggedIn && loggedIn.email) {\n        return loggedIn;\n        } else {\n        return null\n        }\n    }\n}</code></pre>"}];/* Template

    {
        id: 0,
        title: "",
        date: "",
        by:"JaviGP",
        url:{
            twitter: null,
            instagram: null,
            linkedin: null 
        },
        body: 
        `
            <p></p>       
        `
    },

*/